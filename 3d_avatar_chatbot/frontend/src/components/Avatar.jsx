/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useContext, useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { ChatContext } from "../context";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatar(props) {
  const { nodes, materials, scene } = useGLTF("/models/yellow.glb");

  const { messages, setMessages, newAudioStartTime } = useContext(ChatContext);
  const [lipsync, setLipsync] = useState();
  const [speaking, setSpeaking] = useState(false);

  useEffect(() => {
    if (!speaking) {
      setAnimation("Idle");
      setFacialExpression("default");
    }
  }, [speaking]);

  useEffect(() => {
    if (messages.length > 0) {
      console.log("message", messages[0]);
      if (messages[0]?.animation) {
        setAnimation(messages[0].animation);
      }
      if (messages[0]?.facialExpression) {
        setFacialExpression(messages[0].facialExpression);
      }
      if (messages[0]?.mouthCues) {
        setLipsync(messages[0].mouthCues);
      }
      setMessages((prevMessages) => prevMessages.slice(1));
    }
  }, [messages]);

  const { animations } = useGLTF("/models/animations.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  // useEffect(() => {
  //   actions[animation]
  //     .reset()
  //     .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
  //     .play();
  //   return () => actions[animation].fadeOut(0.5);
  // }, [animation]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );
      }
    });
  };

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();
  const audioStartTime = useRef(null);

  useFrame(() => {
    !setupMode &&
      nodes?.EyeLeft?.morphTargetDictionary &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

    // lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    // lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (lipsync && newAudioStartTime.current) {
      setSpeaking(true);
      const currentAudioTime =
        new Date().getTime() / 1000 - newAudioStartTime.current;
      if (currentAudioTime < 0.0) {
        return;
      }
      let i = 0;
      for (i = 0; i < lipsync.length; i++) {
        const mouthCue = lipsync[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime < mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
      if (i === lipsync.length) {
        setSpeaking(false);
      }
    } else if (speaking) {
      console.log("no lipsync; setting speaking to false");
      setSpeaking(false);
    }
    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.1);
    });
  });

  // useEffect(() => {
  //   let blinkTimeout;
  //   const nextBlink = () => {
  //     blinkTimeout = setTimeout(() => {
  //       setBlink(true);
  //       setTimeout(() => {
  //         setBlink(false);
  //         nextBlink();
  //       }, 200);
  //     }, THREE.MathUtils.randInt(1000, 5000));
  //   };
  //   nextBlink();
  //   return () => clearTimeout(blinkTimeout);
  // }, []);

  return (
    <group
      {...props}
      dispose={null}
      scale={[0.05, 0.05, 0.05]}
      position={[0, 1.1, 0]}
    >
      <mesh
        name="M&M013"
        castShadow
        receiveShadow
        geometry={nodes["M&M013"].geometry}
        material={materials["01_Legs.003"]}
        morphTargetDictionary={nodes["M&M013"].morphTargetDictionary}
        morphTargetInfluences={nodes["M&M013"].morphTargetInfluences}
      />
      <mesh
        name="M&M013_1"
        castShadow
        receiveShadow
        geometry={nodes["M&M013_1"].geometry}
        material={materials["Material.002"]}
        morphTargetDictionary={nodes["M&M013_1"].morphTargetDictionary}
        morphTargetInfluences={nodes["M&M013_1"].morphTargetInfluences}
      />
      <mesh
        name="M&M013_2"
        castShadow
        receiveShadow
        geometry={nodes["M&M013_2"].geometry}
        material={materials["Material.003"]}
        morphTargetDictionary={nodes["M&M013_2"].morphTargetDictionary}
        morphTargetInfluences={nodes["M&M013_2"].morphTargetInfluences}
      />
      <mesh
        name="M&M013_3"
        castShadow
        receiveShadow
        geometry={nodes["M&M013_3"].geometry}
        material={materials["03_eye"]}
        morphTargetDictionary={nodes["M&M013_3"].morphTargetDictionary}
        morphTargetInfluences={nodes["M&M013_3"].morphTargetInfluences}
      />
      <mesh
        name="M&M013_4"
        castShadow
        receiveShadow
        geometry={nodes["M&M013_4"].geometry}
        material={materials.hand}
        morphTargetDictionary={nodes["M&M013_4"].morphTargetDictionary}
        morphTargetInfluences={nodes["M&M013_4"].morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/yellow.glb");
useGLTF.preload("/models/animations.glb");
